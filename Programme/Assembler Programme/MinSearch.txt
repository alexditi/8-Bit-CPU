// This program implements a basic array structure for the 8 bit CPU
// An Array is classified by its length and its starting index
// in the main program, the basic array functions read_index and write_index

// initialize pointers for array operations
len = 0xe0
start_index = 0xe1
param1 = 0xfe
param2 = 0xfd
return1 = 0xfc

// initialize pointers for max_search
min = 0xf0
counter = 0xf1

// initialize array
LVA 0x0a
STA len
LVA 0xe2
STA start_index


// Begin max_Search algorithm
// array has been filled manually in RAM

// init counter to one (search begins with array[1])
LVA 1
STA counter

// init min to array[0] as reference
LVA 0
STA param1
CALL #read_index
LMA return1
STA min

// implement while counter < len
// resp.: while len - counter > 0
#BeginLoop
LMA len
LMB counter
CMPB
JZ #EndLoop
JN #EndLoop
// {

// if array[counter] < min do min = array[counter]
// resp.: min - array[counter] > 0
STB param1
CALL #read_index
LMB return1
LMA min
CMPB
JZ #skip_min_up
JN #skip_min_up
// update min
STB min
#skip_min_up

// increment counter value
INCAD counter
STA counter

JMP #BeginLoop
// }
#EndLoop

// output result
LMA min
OUTA
HLT

// subroutine read_index
// reads value at index stored in param1 in RAM
// stores the value in return1 in RAM
// => return1 = array[param1]
#read_index
LMA start_index
LMB param1
ADDB
A2C
LMAC
STA return1
RET

// subroutine write_index
// writes the value from param2 in RAM to index stored in param 1 in RAM
// => array[param1] = param2
#write_index
LMA start_index
LMB param1
ADDB
A2C
LMA param2
STAC
RET



